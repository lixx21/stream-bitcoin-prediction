version: '3'

networks:
  network:
    driver: bridge
volumes:
  zookeeper-volume:
  broker-volume:
  mongodb-data:

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1  # Version of Zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"  # Expose Zookeeper on port 2181
    networks:
      - network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok"]
      interval: 10s
      timeout: 5s
      retries: 5

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    networks:
      - network
    ports:
    # To learn about configuring Kafka for access across networks see
    # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
      - "29092:29092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "BitcoinData:3:1" # topic_name:partitions:replication_factor
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server broker:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    networks:
      - network
    depends_on: 
      - broker
    ports:
      - "7777:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=broker
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

  #MongoDB
  mongodb:
    image: mongo:latest
    container_name: mongodb
    hostname: mongodb
    volumes:
      - mongodb-data:/data/db/
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    ports:
      - "27017:27017"
    networks:
      - network

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_SERVER: 'mongodb'
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    ports:
      - 8081:8081
    networks:
      - network
    depends_on:
      - mongodb


  consumer:
    container_name: consumer
    build:
      context: ./app/streamData/consumer
      dockerfile: Dockerfile
    ports:
      - 8001:8001
    # restart: "always"
    depends_on:
      zookeeper:
        condition: service_healthy
      broker:
        condition: service_healthy
      producer:
        condition: service_started
    networks:
      - network

  producer:
    container_name: producer
    build:
      context: ./app/streamData/producer
      dockerfile: Dockerfile
    ports:
      - 8000:8000
    # restart: "always"
    depends_on:
      zookeeper:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - network

  # app:
  #   build: app/streamlit/.
  #   container_name: app
  #   networks:
  #     - network

  # producer:
  #   build: app/.
  #   container_name: kafka-producer
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   networks:
  #     - network
  #   volumes:
  #     - ./app:/app  # Mount the producer directory containing your Python script
  #   working_dir: /app
  #   command: ["sh", "-c", "python streamData/kafkaProducer.py"]  #run the producer script
  
  # consumer:
  #   build: app/.
  #   container_name: kafka-consumer
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   networks:
  #     - network
  #   volumes:
  #     - ./app:/app  # Mount the producer directory containing your Python script
  #   working_dir: /app
  #   command: ["sh", "-c", "python streamData/kafkaConsumer.py"]  #run the producer script
  



